// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Puzzle.Compound.Core.Models;

namespace Puzzle.Compound.Core.Migrations
{
    [DbContext(typeof(CompoundDbContext))]
    [Migration("20211016165015_UpdateUserRoles")]
    partial class UpdateUserRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ActionsInCompanyRoles", b =>
                {
                    b.Property<Guid>("ActionsInCompanyRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModificationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemPageActionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActionsInCompanyRolesId");

                    b.HasIndex("CompanyRoleId");

                    b.HasIndex("SystemPageActionId");

                    b.ToTable("ActionsInCompanyRoles");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CompanyType")
                        .HasColumnType("int")
                        .HasComment("Multi=>2, Single=>1");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyId");

                    b.HasIndex("PlanId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyEmployee", b =>
                {
                    b.Property<Guid>("CompanyEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompanyEmployeeId");

                    b.ToTable("CompanyEmployees");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyRole", b =>
                {
                    b.Property<Guid>("CompanyRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModificationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleEnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyRoleId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUser", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Gate ID, Employee ID, Company ID");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("UserType")
                        .HasComment("1 = Company, 2 = Employee, 3 = Gate");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompanyUserId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserCompound", b =>
                {
                    b.Property<Guid>("CompanyUserCompoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompanyUserCompoundId");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompanyUserCompounds");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserIssueType", b =>
                {
                    b.Property<Guid>("CompanyUserIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CompanyUserCompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("IssueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyUserIssueId");

                    b.HasIndex("CompanyUserCompoundId");

                    b.HasIndex("IssueTypeId");

                    b.ToTable("CompanyUserIssues");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserReport", b =>
                {
                    b.Property<Guid>("CompanyUserReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CompanyUserCompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ReportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyUserReportId");

                    b.HasIndex("CompanyUserCompoundId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("CompanyUserReports");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserRole", b =>
                {
                    b.Property<Guid>("CompanyUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModificationUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyUserRoleId");

                    b.HasIndex("CompanyRoleId");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompanyUserRoles");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserServiceType", b =>
                {
                    b.Property<Guid>("CompanyUserServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CompanyUserCompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyUserServiceId");

                    b.HasIndex("CompanyUserCompoundId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("CompanyUserServices");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Compound", b =>
                {
                    b.Property<Guid>("CompoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimeZoneOffset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TimeZoneText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TimeZoneValue")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompoundId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Compounds");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAd", b =>
                {
                    b.Property<Guid>("CompoundAdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AdUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EnglishDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompoundAdId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundAds");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAdHistory", b =>
                {
                    b.Property<Guid>("CompoundAdHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasComment("Show = 1, Click = 2");

                    b.Property<Guid>("CompoundAdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompoundAdHistoryId");

                    b.HasIndex("CompoundAdId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("CompoundAdHistories");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAdImage", b =>
                {
                    b.Property<Guid>("CompoundAdImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundAdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CompoundAdImageId");

                    b.HasIndex("CompoundAdId");

                    b.ToTable("CompoundAdImages");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundArea", b =>
                {
                    b.Property<Guid>("CompoundAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompoundAreaId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundAreas");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundCardPrintRequest", b =>
                {
                    b.Property<Guid>("CompoundCardRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundCardRequestId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("CardsCount")
                        .HasColumnType("int")
                        .HasColumnName("CardsCount");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RequestDate");

                    b.HasKey("CompoundCardRequestId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundCardPrintRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundGate", b =>
                {
                    b.Property<Guid>("CompoundGateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundGateId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<Guid>("GateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Gate_Id");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundGateId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("GateId");

                    b.ToTable("CompoundGates");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundGroup", b =>
                {
                    b.Property<Guid>("CompoundGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundGroupId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NameAr");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("NameEn");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ParentGroupId");

                    b.HasKey("CompoundGroupId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("CompoundGroups");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundHelp", b =>
                {
                    b.Property<Guid>("CompoundHelpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundHelpId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<string>("HelpContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HelpContent");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RequestDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompoundHelpId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundHelps");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundInstruction", b =>
                {
                    b.Property<Guid>("CompoundInstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundInstructionId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AddedDate");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<string>("InstructionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InstructionContent");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundInstructionId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundInstructions");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundIssue", b =>
                {
                    b.Property<Guid>("CompoundIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("IssueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("CompoundIssueId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("IssueTypeId");

                    b.ToTable("CompoundIssues");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundManagement", b =>
                {
                    b.Property<Guid>("CompoundManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundManagementId");

                    b.ToTable("CompoundManagements");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNearbyPlace", b =>
                {
                    b.Property<Guid>("CompoundPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompoundPlaceId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundNearbyPlaces");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNews", b =>
                {
                    b.Property<Guid>("CompoundNewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArabicDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicSummary")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("EnglishDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishSummary")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ForegroundTillDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompoundNewsId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundNews");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNewsImage", b =>
                {
                    b.Property<Guid>("CompoundNewsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundNewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CompoundNewsImageId");

                    b.HasIndex("CompoundNewsId");

                    b.ToTable("CompoundNewsImages");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotice", b =>
                {
                    b.Property<Guid>("CompoundNoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NoticeContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NoticeDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompoundNoticeId");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundNotices");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotification", b =>
                {
                    b.Property<Guid>("CompoundNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArabicMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsOwnerOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompoundNotificationId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundNotifications");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotificationImage", b =>
                {
                    b.Property<Guid>("CompoundNotificationImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CompoundNotificationImageId");

                    b.HasIndex("CompoundNotificationId");

                    b.ToTable("CompoundNotificationImages");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundOwner", b =>
                {
                    b.Property<Guid>("CompoundOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WhatsAppNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompoundOwnerId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("CompoundOwners");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundOwnerProperty", b =>
                {
                    b.Property<Guid>("CompoundOwnerPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundOwnerPropertyId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundId");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompoundOwnerPropertyId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundOwnerProperties");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundReport", b =>
                {
                    b.Property<Guid>("CompoundReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompoundReportId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("CompoundReports");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundResident", b =>
                {
                    b.Property<Guid>("CompoundResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundResidentId");

                    b.ToTable("CompoundResidents");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundResidentsIssue", b =>
                {
                    b.Property<Guid>("CompoundResidentIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundResidentIssueId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundIssueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("OrderDatetime")
                        .HasColumnType("datetime");

                    b.HasKey("CompoundResidentIssueId");

                    b.ToTable("CompoundResidentsIssues");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundResidentsService", b =>
                {
                    b.Property<Guid>("CompoundResidentServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompoundResidentServiceId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("OrderDatetime")
                        .HasColumnType("datetime");

                    b.HasKey("CompoundResidentServiceId");

                    b.ToTable("CompoundResidentsServices");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundSecurity", b =>
                {
                    b.Property<Guid>("CompoundSecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CompoundSecurityId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundSecurities");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundService", b =>
                {
                    b.Property<Guid>("CompoundServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompoundServiceId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("CompoundServices");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundStore", b =>
                {
                    b.Property<Guid>("CompoundStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompoundStoreId");

                    b.HasIndex("CompoundId");

                    b.ToTable("CompoundStores");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundSurvey", b =>
                {
                    b.Property<Guid>("CompoundSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundSurveyId");

                    b.ToTable("CompoundSurveys");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundUnit", b =>
                {
                    b.Property<Guid>("CompoundUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompoundUnitTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CompoundUnitId");

                    b.HasIndex("CompoundGroupId");

                    b.HasIndex("CompoundUnitTypeId");

                    b.ToTable("CompoundUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundUnitType", b =>
                {
                    b.Property<int>("CompoundUnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompoundUnitTypeId");

                    b.ToTable("CompoundUnitTypes");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundVisitor", b =>
                {
                    b.Property<Guid>("CompoundVisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundVisitorId");

                    b.ToTable("CompoundVisitors");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundVisitsRequest", b =>
                {
                    b.Property<Guid>("CompoundVisitsRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CompoundVisitsRequestId");

                    b.ToTable("CompoundVisitsRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Gate", b =>
                {
                    b.Property<Guid>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EntryType")
                        .HasColumnType("int")
                        .HasComment("1 = Entrance, 2 = Exit, 3 = All");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("GateId");

                    b.HasIndex("CompanyUserId")
                        .IsUnique()
                        .HasFilter("[CompanyUserId] IS NOT NULL");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueAttachment", b =>
                {
                    b.Property<Guid>("IssueAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("IssueRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("IssueAttachmentId");

                    b.HasIndex("IssueRequestId");

                    b.ToTable("IssueAttachments");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueRequest", b =>
                {
                    b.Property<Guid>("IssueRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short>("CancelType")
                        .HasColumnType("smallint")
                        .HasColumnName("CancelType");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("IssueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Note");

                    b.Property<string>("OwnerComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OwnerComment");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<short>("PresenterRate")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("Rate");

                    b.Property<string>("Record")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestNumber")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<Guid>("UpdateStatusBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateStatusTime")
                        .HasColumnType("datetime");

                    b.HasKey("IssueRequestId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("IssueTypeId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("IssueRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueType", b =>
                {
                    b.Property<Guid>("IssueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Icon");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IssueTypeId");

                    b.ToTable("IssueTypes");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.NotificationUnit", b =>
                {
                    b.Property<Guid>("NotificationUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("NotificationUnitId");

                    b.HasIndex("CompoundNotificationId");

                    b.HasIndex("CompoundUnitId");

                    b.ToTable("NotificationUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerAssignUnitRequest", b =>
                {
                    b.Property<Guid>("OwnerAssignUnitRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Waiting = 0, Cancel = 1, Approved = 2");

                    b.HasKey("OwnerAssignUnitRequestId");

                    b.HasIndex("CompoundUnitId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("OwnerAssignUnitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerAssignedUnit", b =>
                {
                    b.Property<Guid>("OwnerAssignedUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTo")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartFrom")
                        .HasColumnType("datetime");

                    b.HasKey("OwnerAssignedUnitId");

                    b.HasIndex("CompoundUnitId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("OwnerAssignedUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerNotification", b =>
                {
                    b.Property<Guid>("OwnerNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnerNotificationId");

                    b.HasIndex("CompoundNotificationId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("OwnerNotifications");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerRegistration", b =>
                {
                    b.Property<Guid>("OwnerRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CreatedByRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("IsBlocked");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("MainRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("UserConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Owner => 1, Sub User => 2, Tenant => 3");

                    b.Property<string>("WhatsAppNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OwnerRegistrationId");

                    b.ToTable("OwnerRegistrations");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerUnit", b =>
                {
                    b.Property<Guid>("OwnerUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CompoundOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("OwnerUnitId");

                    b.HasIndex("CompoundOwnerId");

                    b.HasIndex("CompoundUnitId");

                    b.ToTable("OwnerUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Plan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PlanNameAr")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PlanNameEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PlanDetail", b =>
                {
                    b.Property<Guid>("PlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanDetailId");

                    b.HasIndex("PlanId");

                    b.HasIndex("PlanItemId");

                    b.ToTable("PlanDetails");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PlanItem", b =>
                {
                    b.Property<Guid>("PlanItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PlanItemDetailAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanItemDetailEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanItemNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlanItemNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PlanItemId");

                    b.ToTable("PlanItems");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PrintCardRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OwnerRegisterationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Picture")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("VisitRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompoundUnitId");

                    b.HasIndex("OwnerRegisterationId");

                    b.HasIndex("VisitRequestId");

                    b.ToTable("PrintCardRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RefreshToken_Id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User_Id");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("User_Type");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ReportType", b =>
                {
                    b.Property<Guid>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Icon");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceAttachment", b =>
                {
                    b.Property<Guid>("ServiceAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ServiceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceAttachmentId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceAttachments");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceRequest", b =>
                {
                    b.Property<Guid>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short>("CancelType")
                        .HasColumnType("smallint")
                        .HasColumnName("CancelType");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Comment");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime")
                        .HasColumnName("From");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Note");

                    b.Property<string>("OwnerComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OwnerComment");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<short>("PresenterRate")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("Rate");

                    b.Property<string>("Record")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime")
                        .HasColumnName("To");

                    b.Property<Guid>("UpdateStatusBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateStatusTime")
                        .HasColumnType("datetime");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("CompoundUnitId");

                    b.HasIndex("OwnerRegistrationId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Icon");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPage", b =>
                {
                    b.Property<Guid>("SystemPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PageArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageIndex")
                        .HasColumnType("int");

                    b.Property<string>("PageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemPageId");

                    b.HasIndex("ParentPageId");

                    b.ToTable("SystemPage");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPageAction", b =>
                {
                    b.Property<Guid>("SystemPageActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionArabicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionEnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionUniqueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SystemPageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SystemPageActionId");

                    b.HasIndex("SystemPageId");

                    b.ToTable("SystemPageAction");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ActionPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ControllerPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CurrentJsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("PostDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PreviousJsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitRequest", b =>
                {
                    b.Property<Guid>("VisitRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CarNo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompoundUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Days")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GroupNo")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("VisitRequestId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompoundId");

                    b.HasIndex("CompoundUnitId");

                    b.HasIndex("OwnerRegistrationId");

                    b.ToTable("VisitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitRequestAttachment", b =>
                {
                    b.Property<Guid>("VisitRequestAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("VisitRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitRequestAttachmentId");

                    b.HasIndex("VisitRequestId");

                    b.ToTable("VisitRequestAttachments");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitTransactionHistory", b =>
                {
                    b.Property<Guid>("VisitTransactionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitTransactionHistoryId");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("GateId");

                    b.HasIndex("VisitRequestId");

                    b.ToTable("VisitTransactionHistory");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ActionsInCompanyRoles", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyRole", "CompanyRoles")
                        .WithMany("ActionsInCompanyRoles")
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.SystemPageAction", "SystemPageActions")
                        .WithMany("ActionsInCompanyRoles")
                        .HasForeignKey("SystemPageActionId")
                        .IsRequired();

                    b.Navigation("CompanyRoles");

                    b.Navigation("SystemPageActions");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Company", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Plan", "Plan")
                        .WithMany("Companies")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyRole", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Company", "Company")
                        .WithMany("CompanyRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUser", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserCompound", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserCompounds")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompanyUserCompounds")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserIssueType", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUserCompound", "CompanyUserCompound")
                        .WithMany("CompanyUserIssues")
                        .HasForeignKey("CompanyUserCompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.IssueType", "IssueType")
                        .WithMany("CompanyUserIssues")
                        .HasForeignKey("IssueTypeId")
                        .IsRequired();

                    b.Navigation("CompanyUserCompound");

                    b.Navigation("IssueType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserReport", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUserCompound", "CompanyUserCompound")
                        .WithMany("CompanyUserReports")
                        .HasForeignKey("CompanyUserCompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.ReportType", "ReportType")
                        .WithMany("CompanyUserReports")
                        .HasForeignKey("ReportTypeId")
                        .IsRequired();

                    b.Navigation("CompanyUserCompound");

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserRole", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyRole", "CompanyRole")
                        .WithMany("CompanyUserRoles")
                        .HasForeignKey("CompanyRoleId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserRoles")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany()
                        .HasForeignKey("CompoundId");

                    b.Navigation("CompanyRole");

                    b.Navigation("CompanyUser");

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserServiceType", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUserCompound", "CompanyUserCompound")
                        .WithMany("CompanyUserServices")
                        .HasForeignKey("CompanyUserCompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.ServiceType", "ServiceType")
                        .WithMany("CompanyUserServices")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired();

                    b.Navigation("CompanyUserCompound");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Compound", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Company", "Company")
                        .WithMany("Compounds")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAd", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundAds")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAdHistory", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundAd", "CompoundAd")
                        .WithMany("CompoundAdHistories")
                        .HasForeignKey("CompoundAdId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("CompoundAdHistories")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.Navigation("CompoundAd");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAdImage", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundAd", "CompoundAd")
                        .WithMany("Images")
                        .HasForeignKey("CompoundAdId")
                        .IsRequired();

                    b.Navigation("CompoundAd");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundArea", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundAreas")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundCardPrintRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundCardPrintRequests")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundGate", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundGates")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.Gate", "Gate")
                        .WithMany("CompoundGates")
                        .HasForeignKey("GateId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("Gate");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundGroup", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundGroups")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundGroup", "Group")
                        .WithMany("Groups")
                        .HasForeignKey("ParentGroupId");

                    b.Navigation("Compound");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundHelp", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundHelps")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundInstruction", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundInstructions")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundIssue", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundIssues")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.IssueType", "IssueType")
                        .WithMany("CompoundIssues")
                        .HasForeignKey("IssueTypeId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("IssueType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNearbyPlace", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundNearbyPlaces")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNews", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundNews")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNewsImage", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundNews", "CompoundNews")
                        .WithMany("Images")
                        .HasForeignKey("CompoundNewsId")
                        .IsRequired();

                    b.Navigation("CompoundNews");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotice", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUser", "CompanyUser")
                        .WithMany("CompoundNotices")
                        .HasForeignKey("CompanyUserId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundNotices")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotification", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundNotifications")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotificationImage", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundNotification", "CompoundNotification")
                        .WithMany("Images")
                        .HasForeignKey("CompoundNotificationId")
                        .IsRequired();

                    b.Navigation("CompoundNotification");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundOwner", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("CompoundOwners")
                        .HasForeignKey("OwnerRegistrationId");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundOwnerProperty", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundOwnerProperties")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundReport", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundReports")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.ReportType", "ReportType")
                        .WithMany("CompoundReports")
                        .HasForeignKey("ReportTypeId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundSecurity", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundSecurities")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundService", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundServices")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.ServiceType", "ServiceType")
                        .WithMany("CompoundServices")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundStore", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("CompoundStores")
                        .HasForeignKey("CompoundId")
                        .IsRequired();

                    b.Navigation("Compound");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundUnit", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundGroup", "CompoundGroup")
                        .WithMany("CompoundUnits")
                        .HasForeignKey("CompoundGroupId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnitType", "CompoundUnitType")
                        .WithMany("CompoundUnits")
                        .HasForeignKey("CompoundUnitTypeId")
                        .IsRequired();

                    b.Navigation("CompoundGroup");

                    b.Navigation("CompoundUnitType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Gate", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUser", "User")
                        .WithOne("Gate")
                        .HasForeignKey("Puzzle.Compound.Core.Models.Gate", "CompanyUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueAttachment", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.IssueRequest", "IssueRequest")
                        .WithMany("IssueAttachments")
                        .HasForeignKey("IssueRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueRequest");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany()
                        .HasForeignKey("CompoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.IssueType", "IssueType")
                        .WithMany("IssueRequests")
                        .HasForeignKey("IssueTypeId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("IssueRequests")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("IssueType");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.NotificationUnit", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundNotification", "CompoundNotification")
                        .WithMany("NotificationUnits")
                        .HasForeignKey("CompoundNotificationId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("NotificationUnits")
                        .HasForeignKey("CompoundUnitId")
                        .IsRequired();

                    b.Navigation("CompoundNotification");

                    b.Navigation("CompoundUnit");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerAssignUnitRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("OwnerAssignUnitRequests")
                        .HasForeignKey("CompoundUnitId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("OwnerAssignUnitRequests")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.Navigation("CompoundUnit");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerAssignedUnit", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("OwnerAssignedUnits")
                        .HasForeignKey("CompoundUnitId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("OwnerAssignedUnits")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.Navigation("CompoundUnit");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerNotification", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundNotification", "CompoundNotification")
                        .WithMany("OwnerNotifications")
                        .HasForeignKey("CompoundNotificationId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("OwnerNotifications")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.Navigation("CompoundNotification");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerUnit", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundOwner", "CompoundOwner")
                        .WithMany("OwnerUnits")
                        .HasForeignKey("CompoundOwnerId");

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("OwnerUnits")
                        .HasForeignKey("CompoundUnitId")
                        .IsRequired();

                    b.Navigation("CompoundOwner");

                    b.Navigation("CompoundUnit");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PlanDetail", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Plan", "Plan")
                        .WithMany("PlanDetails")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.PlanItem", "PlanItem")
                        .WithMany("PlanDetails")
                        .HasForeignKey("PlanItemId")
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("PlanItem");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PrintCardRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("PrintCardRequests")
                        .HasForeignKey("CompoundUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("PrintCardRequests")
                        .HasForeignKey("OwnerRegisterationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.VisitRequest", "VisitRequest")
                        .WithMany("PrintCardRequests")
                        .HasForeignKey("VisitRequestId");

                    b.Navigation("CompoundUnit");

                    b.Navigation("OwnerRegistration");

                    b.Navigation("VisitRequest");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceAttachment", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceAttachments")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany()
                        .HasForeignKey("CompoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("CompoundUnitId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("OwnerRegistrationId")
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.ServiceType", "ServiceType")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired();

                    b.Navigation("Compound");

                    b.Navigation("CompoundUnit");

                    b.Navigation("OwnerRegistration");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPage", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.SystemPage", "ParentPage")
                        .WithMany("SubPages")
                        .HasForeignKey("ParentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPage");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPageAction", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.SystemPage", "SystemPages")
                        .WithMany("SystemPageActions")
                        .HasForeignKey("SystemPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemPages");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitRequest", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.Company", "Company")
                        .WithMany("VisitRequests")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.Compound", "Compound")
                        .WithMany("VisitRequests")
                        .HasForeignKey("CompoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.CompoundUnit", "CompoundUnit")
                        .WithMany("VisitRequests")
                        .HasForeignKey("CompoundUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.OwnerRegistration", "OwnerRegistration")
                        .WithMany("VisitRequests")
                        .HasForeignKey("OwnerRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Compound");

                    b.Navigation("CompoundUnit");

                    b.Navigation("OwnerRegistration");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitRequestAttachment", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.VisitRequest", "VisitRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("VisitRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitRequest");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitTransactionHistory", b =>
                {
                    b.HasOne("Puzzle.Compound.Core.Models.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId");

                    b.HasOne("Puzzle.Compound.Core.Models.Gate", "Gate")
                        .WithMany("VisitTransactionHistories")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puzzle.Compound.Core.Models.VisitRequest", "VisitRequest")
                        .WithMany("VisitTransactionHistories")
                        .HasForeignKey("VisitRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("Gate");

                    b.Navigation("VisitRequest");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Company", b =>
                {
                    b.Navigation("CompanyRoles");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Compounds");

                    b.Navigation("VisitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyRole", b =>
                {
                    b.Navigation("ActionsInCompanyRoles");

                    b.Navigation("CompanyUserRoles");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUser", b =>
                {
                    b.Navigation("CompanyUserCompounds");

                    b.Navigation("CompanyUserRoles");

                    b.Navigation("CompoundNotices");

                    b.Navigation("Gate");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompanyUserCompound", b =>
                {
                    b.Navigation("CompanyUserIssues");

                    b.Navigation("CompanyUserReports");

                    b.Navigation("CompanyUserServices");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Compound", b =>
                {
                    b.Navigation("CompanyUserCompounds");

                    b.Navigation("CompoundAds");

                    b.Navigation("CompoundAreas");

                    b.Navigation("CompoundCardPrintRequests");

                    b.Navigation("CompoundGates");

                    b.Navigation("CompoundGroups");

                    b.Navigation("CompoundHelps");

                    b.Navigation("CompoundInstructions");

                    b.Navigation("CompoundIssues");

                    b.Navigation("CompoundNearbyPlaces");

                    b.Navigation("CompoundNews");

                    b.Navigation("CompoundNotices");

                    b.Navigation("CompoundNotifications");

                    b.Navigation("CompoundOwnerProperties");

                    b.Navigation("CompoundReports");

                    b.Navigation("CompoundSecurities");

                    b.Navigation("CompoundServices");

                    b.Navigation("CompoundStores");

                    b.Navigation("VisitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundAd", b =>
                {
                    b.Navigation("CompoundAdHistories");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundGroup", b =>
                {
                    b.Navigation("CompoundUnits");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNews", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundNotification", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("NotificationUnits");

                    b.Navigation("OwnerNotifications");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundOwner", b =>
                {
                    b.Navigation("OwnerUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundUnit", b =>
                {
                    b.Navigation("NotificationUnits");

                    b.Navigation("OwnerAssignedUnits");

                    b.Navigation("OwnerAssignUnitRequests");

                    b.Navigation("OwnerUnits");

                    b.Navigation("PrintCardRequests");

                    b.Navigation("ServiceRequests");

                    b.Navigation("VisitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.CompoundUnitType", b =>
                {
                    b.Navigation("CompoundUnits");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Gate", b =>
                {
                    b.Navigation("CompoundGates");

                    b.Navigation("VisitTransactionHistories");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueRequest", b =>
                {
                    b.Navigation("IssueAttachments");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.IssueType", b =>
                {
                    b.Navigation("CompanyUserIssues");

                    b.Navigation("CompoundIssues");

                    b.Navigation("IssueRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.OwnerRegistration", b =>
                {
                    b.Navigation("CompoundAdHistories");

                    b.Navigation("CompoundOwners");

                    b.Navigation("IssueRequests");

                    b.Navigation("OwnerAssignedUnits");

                    b.Navigation("OwnerAssignUnitRequests");

                    b.Navigation("OwnerNotifications");

                    b.Navigation("PrintCardRequests");

                    b.Navigation("ServiceRequests");

                    b.Navigation("VisitRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.Plan", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.PlanItem", b =>
                {
                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ReportType", b =>
                {
                    b.Navigation("CompanyUserReports");

                    b.Navigation("CompoundReports");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceRequest", b =>
                {
                    b.Navigation("ServiceAttachments");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.ServiceType", b =>
                {
                    b.Navigation("CompanyUserServices");

                    b.Navigation("CompoundServices");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPage", b =>
                {
                    b.Navigation("SubPages");

                    b.Navigation("SystemPageActions");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.SystemPageAction", b =>
                {
                    b.Navigation("ActionsInCompanyRoles");
                });

            modelBuilder.Entity("Puzzle.Compound.Core.Models.VisitRequest", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("PrintCardRequests");

                    b.Navigation("VisitTransactionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
